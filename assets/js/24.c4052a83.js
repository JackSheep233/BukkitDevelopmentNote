(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{279:function(t,a,s){"use strict";s.r(a);var n=s(28),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"bukkit-的多线程多任务框架"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#bukkit-的多线程多任务框架"}},[t._v("#")]),t._v(" Bukkit 的多线程多任务框架")]),t._v(" "),s("h1",{attrs:{id:"前言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),s("p",[t._v("本节前半部分内容基本是对Javadoc的复述, 以及使用它们的注意事项. 如果此前您已经使用过了此包, 或者您有良好的文档阅读及应用能力, 建议您先阅读“注意事项”和“小技巧”一栏, 这才是本节教程更重要的知识!")]),t._v(" "),s("h1",{attrs:{id:"org-bukkit-scheduler-包结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#org-bukkit-scheduler-包结构"}},[t._v("#")]),t._v(" org.bukkit.scheduler 包结构")]),t._v(" "),s("p",[t._v("Bukkit 的多线程多任务框架放在了此包, 此包只含有三个接口("),s("code",[t._v("BukkitSheduler")]),t._v(", "),s("code",[t._v("BukkitTask")]),t._v(", "),s("code",[t._v("BukkitWorker")]),t._v(")和一个抽象类("),s("code",[t._v("BukkitRunnable")]),t._v("，实现了java.lang.Runnable). 相关实现在实现了 Bukkit API 的底层服务器代码中(比如CraftBukkit)."),s("br"),t._v("\n他们之间的关系大致是这样的: "),s("code",[t._v("BukkitSheduler")]),t._v(" 负责调度/创建任务，并管理他们(类似于线程池). "),s("code",[t._v("BukkitTask")]),t._v(" 负责存储由 "),s("code",[t._v("BukkitSheduler")]),t._v(" 调度的单个任务, 并提供获取它们的任务 id 以及取消它们的一系列方法. "),s("code",[t._v("BukkitWorker")]),t._v(" 是处理对应异步任务的worker线程. "),s("code",[t._v("BukkitRunnable")]),t._v(" 基本上是对 BukkitScheduler 的包装, 使用它比使用 BukkitScheduler 相对来说更简洁些.")]),t._v(" "),s("h1",{attrs:{id:"访问-org-bukkit-scheduler-的两个入口"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#访问-org-bukkit-scheduler-的两个入口"}},[t._v("#")]),t._v(" 访问 org.bukkit.scheduler 的两个入口")]),t._v(" "),s("p",[t._v("一是使用"),s("code",[t._v("org.bukkit.Bukkit.getScheduler()")]),t._v("或"),s("code",[t._v("org.bukkit.Bukkit.getServer().getScheduler()")]),t._v("获取"),s("code",[t._v("BukkitScheduler")]),t._v("实例.\n例子:")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Bukkit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getScheduler")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("runTask")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Runnable")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("run")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 逻辑代码")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("另一个是构造一个继承"),s("code",[t._v("org.bukkit.scheduler.BukkitRunnable")]),t._v("的匿名内部类, 就像这样:")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BukkitRunnable")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("run")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 您的代码逻辑")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("runxxx")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("然后再调用 BukkitRunnable 里的各种方法(事实上最终它还是要访问"),s("code",[t._v("BukkitScheduler")]),t._v(", 因此两种方法是等效的). 您也可以直接在Runnable内调用BukkitRunnable的方法, 实现自我取消, 等等. 使用BukkitRunnable的优点在于它简单便捷.")]),t._v(" "),s("h1",{attrs:{id:"如何使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何使用"}},[t._v("#")]),t._v(" 如何使用")]),t._v(" "),s("p",[t._v("在这里只介绍Bukkit 任务调度API的核心 ———— BukkitScheduler 的使用方法, 并且不对那些已过时的方法做解释说明(通常情况下你不应该使用它们)."),s("br"),t._v("\n值得注意的是, Bukkit 的调度任务系统是以 Minecraft 的游戏刻为时间单位的, 其中一个游戏刻(又叫做tick, 下文都使用"),s("code",[t._v("tick")]),t._v("指代游戏刻)对应现实世界的50ms(也就是说, 理想情况下20 ticks是一秒). 但实际上受服务器性能因素的影响, 不一定每一tick都精确地经过了50ms (服务器每秒经过的ticks数可以使用命令"),s("code",[t._v("tps")]),t._v("查询). 所以在您编写Bukkit 插件时, 请把你置身于 Minecraft 的世界里:)"),s("br"),t._v("\n如果没有特别说明, Bukkit所提供的调度任务的方法, 时间均以tick为单位. 方法全名规则是前者为方法返回值, 后者为方法名和相关参数.")]),t._v(" "),s("h2",{attrs:{id:"调度同步任务"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#调度同步任务"}},[t._v("#")]),t._v(" 调度同步任务")]),t._v(" "),s("h3",{attrs:{id:"bukkittask-runtask-plugin-plugin-java-lang-runnable-task"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#bukkittask-runtask-plugin-plugin-java-lang-runnable-task"}},[t._v("#")]),t._v(" BukkitTask runTask(Plugin plugin, java.lang.Runnable task)")]),t._v(" "),s("p",[t._v("这是调度"),s("strong",[t._v("同步任务")]),t._v("的主要方法, 另一个方法"),s("code",[t._v("runTaskLater")]),t._v("提供了一个"),s("code",[t._v("delay")]),t._v("延迟参数, 用于指定调度任务多久后才开始执行. 不指定"),s("code",[t._v("delay")]),t._v("的情况下, delay值为1.")]),t._v(" "),s("h3",{attrs:{id:"bukkittask-runtasktimer-plugin-plugin-java-lang-runnable-task-long-delay-long-period"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#bukkittask-runtasktimer-plugin-plugin-java-lang-runnable-task-long-delay-long-period"}},[t._v("#")]),t._v(" BukkitTask runTaskTimer(Plugin plugin, java.lang.Runnable task, long delay, long period)")]),t._v(" "),s("p",[t._v("这是调度重复任务的方法, 所得的任务是"),s("strong",[t._v("同步")]),t._v("的, "),s("code",[t._v("period")]),t._v("最低值为1，您不能将其设为比1低的值 (若设为0则等效于1, 小于0表示该任务不是重复的)."),s("br"),t._v("\n由于是同步任务, 您在Runnable的run()方法中的代码, 是运行于服务器主线程的, 所以请仔细评估这些代码的效率, 因为这可能会影响服务器的性能(尤其是TPS指标), 从而降低服务器流畅度. 如果不与 Minecraft 有关, 请放在下面要介绍的异步任务.")]),t._v(" "),s("h2",{attrs:{id:"调度异步任务"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#调度异步任务"}},[t._v("#")]),t._v(" 调度异步任务")]),t._v(" "),s("h3",{attrs:{id:"bukkittask-runtaskasynchronously-plugin-plugin-java-lang-runnable-task"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#bukkittask-runtaskasynchronously-plugin-plugin-java-lang-runnable-task"}},[t._v("#")]),t._v(" BukkitTask runTaskAsynchronously(Plugin plugin, java.lang.Runnable task)")]),t._v(" "),s("p",[t._v("这是调度"),s("strong",[t._v("异步任务")]),t._v("的主要方法, 另一个方法"),s("code",[t._v("runTaskLaterAsynchronously")]),t._v("提供一个"),s("code",[t._v("delay")]),t._v("延迟参数.")]),t._v(" "),s("h3",{attrs:{id:"bukkittask-runtasktimerasynchronously-plugin-plugin-java-lang-runnable-task-long-delay-long-period"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#bukkittask-runtasktimerasynchronously-plugin-plugin-java-lang-runnable-task-long-delay-long-period"}},[t._v("#")]),t._v(" BukkitTask runTaskTimerAsynchronously(Plugin plugin, java.lang.Runnable task, long delay, long period)")]),t._v(" "),s("p",[t._v("这是调度重复任务的方法, 所得的任务是"),s("strong",[t._v("异步")]),t._v("的. 通常我们使用异步任务来处理非Minecraft的逻辑,比如数据库的CRUD(增删改查)操作."),s("br"),t._v("\n在异步任务中, 需要特别注意线程安全问题, 比如您不能随意调用 Bukkit API. 这个问题会稍后予以详细的解释说明.")]),t._v(" "),s("h1",{attrs:{id:"注意事项"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#注意事项"}},[t._v("#")]),t._v(" 注意事项")]),t._v(" "),s("h2",{attrs:{id:"线程安全"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线程安全"}},[t._v("#")]),t._v(" 线程安全")]),t._v(" "),s("p",[t._v("Bukkit API文档清楚地告诉我们异步任务中不应访问某些Bukkit API, 需要着重考虑线程安全. 大多数 Bukkit API 不是线程安全的."),s("br"),t._v("\n什么是线程安全呢?")]),t._v(" "),s("blockquote",[s("p",[t._v("在拥有共享数据的多条线程并行执行的程序中，线程安全的代码会通过同步机制保证各个线程都可以正常且正确的执行，不会出现数据污染等意外情况。\n“引自百度百科”")])]),t._v(" "),s("p",[t._v("大多数集合不是线程安全的, 比如经常使用的"),s("code",[t._v("HashMap")]),t._v("、"),s("code",[t._v("ArrayList")]),t._v(". 同样适用于非线程安全的对象."),s("br"),t._v("\n限于篇幅, 这里不作深入探讨. 想要了解更多, 请询问您的书籍与搜索引擎."),s("br"),t._v("\nBukkit 中的线程安全?"),s("br"),t._v("\nMinecraft 中几乎所有的游戏逻辑都运行于主线程中, 而插件的大多数逻辑也是运行于主线程中的, 这包括插件命令的执行、(同步)事件的处理等等."),s("br"),t._v("\n如果我们调度了一个异步任务, 或者处于异步事件中, 那么就不应当访问与Minecraft游戏内容有关的API(比如操作方块、加载区块、踢出玩家等). 尝试这么做极有可能得到异常, 使得插件崩溃.")]),t._v(" "),s("h2",{attrs:{id:"如何在异步任务中调度同步任务-以访问-bukkit-的非线程安全的方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何在异步任务中调度同步任务-以访问-bukkit-的非线程安全的方法"}},[t._v("#")]),t._v(" 如何在异步任务中调度同步任务, 以访问 Bukkit 的非线程安全的方法?")]),t._v(" "),s("p",[t._v("一种就是"),s("code",[t._v("BukkitScheduler.runTask")]),t._v(" (方法不带"),s("code",[t._v("asynchronously")]),t._v("字眼). 这返回的永远是同步任务, 可以大胆访问 Bukkit API, 就像这样:")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Bukkit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getScheduler")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("runTaskAsynchronously")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 从数据库拉取些数据")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 执行同步任务")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Bukkit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getScheduler")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("runTask")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ExamplePlugin")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("instance"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" player"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sendMessage")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"你好, 世界!"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("另一种就是"),s("code",[t._v("BukkitScheduler.callSyncMethod")]),t._v(", 这个会在之后的小技巧一栏作介绍.")]),t._v(" "),s("h2",{attrs:{id:"bukkit-api中哪些操作是非线程安全的-哪些又是线程安全的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#bukkit-api中哪些操作是非线程安全的-哪些又是线程安全的"}},[t._v("#")]),t._v(" Bukkit API中哪些操作是非线程安全的, 哪些又是线程安全的?")]),t._v(" "),s("blockquote",[s("p",[t._v("不完整列表. 仅供参考. 不保证线程安全的方法的行为将来会变化. 不对版本差异导致的行为不同作担保.")])]),t._v(" "),s("p",[t._v("线程安全的有:")]),t._v(" "),s("ol",[s("li",[t._v("scheduler包自身.")]),t._v(" "),s("li",[t._v("Player#sendMessage()")])]),t._v(" "),s("blockquote",[s("p",[t._v("你可以发现大量插件在AsyncPlayerChatEvent事件中调用player.sendMessage(). 因此我们有理由确信这是线程安全的.")])]),t._v(" "),s("ol",{attrs:{start:"3"}},[s("li",[t._v("PluginManager#callEvent(event)")])]),t._v(" "),s("blockquote",[s("p",[t._v("用于触发事件的方法. 在"),s("code",[t._v("SimplePluginManager")]),t._v("中, 该方法使用了synchronized关键字对其实例加锁, 因此是线程安全的. 更多细节请阅读源代码.")])]),t._v(" "),s("ol",{attrs:{start:"4"}},[s("li",[t._v("发包 - sendPacket")])]),t._v(" "),s("blockquote",[s("p",[t._v("为何Player#sendMessage()是线程安全的就是因为它. 我们可以深入craftbukkit乃至nms(net.minecraft.server), sendPacket不过是将数据包传入netty管道, 让netty处理. 如果某个方法仅仅执行了发包流程而没有实际从游戏里加载数据, 那么一般可视其为线程安全的. 因此利用"),s("code",[t._v("World#spawnParticle")]),t._v("发送粒子效果以及"),s("code",[t._v("World#playEffect")]),t._v("向玩家发送特效、"),s("code",[t._v("Player#sendTitle")]),t._v("向玩家发title等也是线程安全的. 我们可以把相关数学运算放到异步线程中, 算完再切换线程发粒子特效.")])]),t._v(" "),s("p",[t._v("非线程安全的有:")]),t._v(" "),s("ol",[s("li",[t._v("设置/获取方块、加载/生成区块")]),t._v(" "),s("li",[t._v("操作实体")]),t._v(" "),s("li",[t._v("权限检查(是的. 某些情况下这是非线程安全的, 因为插件一同共享权限列表)")])]),t._v(" "),s("h2",{attrs:{id:"关闭插件时-确保取消你调度的所有任务"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#关闭插件时-确保取消你调度的所有任务"}},[t._v("#")]),t._v(" 关闭插件时, 确保取消你调度的所有任务")]),t._v(" "),s("p",[t._v("最简单的方法就是在插件主类的"),s("code",[t._v("onDisable")]),t._v("方法写上这一行代码:")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Bukkit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getScheduler")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("cancelTasks")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("plugin"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("其中plugin是你的插件实例, 通常是"),s("code",[t._v("this")]),t._v("."),s("br"),t._v("\n如果不这么做，那么你的插件被关闭之后, 残存的任务(一般是重复任务)仍在运行, 任务会调用相关变量, 而你在关闭插件时如果清理了那些变量, 将会导致一些无法预料的问题.")]),t._v(" "),s("h1",{attrs:{id:"小技巧"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#小技巧"}},[t._v("#")]),t._v(" 小技巧")]),t._v(" "),s("h2",{attrs:{id:"使用-lambda-表达式替换匿名内部类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用-lambda-表达式替换匿名内部类"}},[t._v("#")]),t._v(" 使用 lambda 表达式替换匿名内部类")]),t._v(" "),s("p",[t._v("自Java 8开始提供对 lambda 表达式的支持. 匿名内部类转 lambda 表达式可使代码看上去更加简洁漂亮. 比如")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("scheduler"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("runTask")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Runnable")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("run")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"这是从在任务中输出的一句话."')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("可以替换成:")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("scheduler"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("runTask")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"这是从在任务中输出的一句话."')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("是不是觉得匿名内部类多不优雅, 而 lambda 表达式一行就解决了所有问题? 尽早对丑陋的匿名内部类说byebye吧~")]),t._v(" "),s("h2",{attrs:{id:"使用-bukkitscheduler-提供的callsyncmethod方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用-bukkitscheduler-提供的callsyncmethod方法"}},[t._v("#")]),t._v(" 使用 BukkitScheduler 提供的"),s("code",[t._v("callSyncMethod")]),t._v("方法")]),t._v(" "),s("blockquote",[s("p",[t._v("其实这不应出现在这里的. 不过使用这种方法有点门槛, 如果没有学过相关概念, 你可能不知道从何下手. 该方法涉及到了 Java 的 Future 和 Callable 概念. 如果不知道是什么, 可以搜索来查找资料. 相对于线程安全, Future 和 Callable 概念理解起来容易多了.")])]),t._v(" "),s("p",[t._v("这也是使你的代码置于服务器主线程执行的方法之一, 通常用于需要在主线程执行操作获取数据并返回给异步线程的场景."),s("br"),t._v("\n下面是鄙人对这些概念的粗略理解:")]),t._v(" "),s("blockquote",[s("p",[t._v("常规的Runnable的run方法是没有返回值的, 它是一个void方法. 这时我们需要使用"),s("code",[t._v("Callable")]),t._v(", "),s("code",[t._v("Callable")]),t._v("的call方法是有返回值的, 值类型受泛型影响. 使用Runnable还有一个缺点:我(Boss)命令手下一位职员做点任务. 命令完后(开线程, 使用Runnable), 我需要等待职员做完任务的一些反馈, 没有职员提供的数据不能继续工作. 然后在职员执行完任务之前我能干嘛? 没办法, 只能等, 无论职员会执行多久. 有没有办法, 在职员执行任务的过程中, 我还可以做点别的事情呢?")])]),t._v(" "),s("p",[t._v("Java提供了Future这个模式. 于是上面的情况变成了这样:")]),t._v(" "),s("blockquote",[s("p",[t._v("我命令手下一位职员做点任务. 命令完后(开线程, task为FutureTask), 我可以做些别的事情了, 比如与某某打情骂俏...... 之后我可以询问那位职员事情做完没有(Future#isDone()), 或者直接问他结果(Future#get()), 这个取值过程是阻塞的, 直到那位职员完成任务后才能报告结果. 如果我等不耐烦了我还可以使他停下来, 不做了(Future#cancel(boolean)). "),s("s",[t._v("甚至看不顺眼解雇他")]),t._v(" 等待职员完成任务的同时, 又多了一份愉悦, 何乐而不为呢~")])]),t._v(" "),s("p",[t._v("这里就不作更多介绍了. 欲了解更多内容和用法可以参考"),s("a",{attrs:{href:"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Future.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Javadoc"),s("OutboundLink")],1),t._v(" 以及询问搜索引擎.")]),t._v(" "),s("p",[t._v("直接上食用方法吧! 这是一个使用主线程获取当前在线玩家数量并返回的例子:")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Future")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" future "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Bukkit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getScheduler")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("callSyncMethod")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ExamplePlugin")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("instance"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// call方法是可以抛出异常的")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 假设这个操作有些耗时...这是对主线程的sleep(事实上这最好不要超过50ms)")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sleep")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Bukkit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getOnlinePlayers")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("size")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 比如这里是数据库操作过程, 假设连接数据库并进行操作耗时1s, 这时我们应该可以拿到在线玩家数了")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果操作过程小于1s更好, 只要等上面的方法执行完即可")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// future.get()是阻塞的, 直到执行完毕")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" players "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" future"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 向数据库写入数据")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"玩家数:"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" players"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterruptedException")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ExecutionException")]),t._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 异常处理")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("这段代码是在异步任务中运行的.")]),t._v(" "),s("p",[t._v("食用方法可以说是较复杂了, 如果你没有获取数据的需要, 仅仅需要在主线程内运行特定代码, 使用"),s("code",[t._v("BukkitScheduler#runTask()")]),t._v("更好. 没有必要为了 bigger 而 bigger, 唯有"),s("strong",[t._v("simple")]),t._v("得人心.")])])}),[],!1,null,null,null);a.default=e.exports}}]);